바이트로 하면 어떤 데이터를 보냈는지 검사하는 시간이 필요하지만
문자로 하게 된다면 그런 과정이 필요하지 않는다

문자는 키보드로 입력한 순서대로 입력이 돼야한다.
스트림은 FIFO구조 First In First Out -> 먼저 입력된 것이 먼저 나간다
steak은 FirstInLastOut -> FILO
Quee는 First In First Out -> FIFO

스트림은 Quee 형태로 출력된다

JAVA의 IO 스트림 종류
바이트 스트림(0과 1로 데이터를 받음)
 입출력 데이터를 단순 바이트의 흐름으로 처리 
  - 0과 1의 데이터로 처리
 문자 데이터, 바이너리 데이터든 상관없이 처리 가능

문자 스트림(0과 1로 받아서 문자로만 반환)
 문자만 입출력하는 Stream
 문자가 아닌 바이너리 데이터는 스트림에서 처리 못함
 문자가 아닌 데이터를 문자 스트림으로 출력 시 깨진 기호 출력

스트림으로 끝나는 것은 바이트

스트림 연결
 - 객체 생성 하듯이
키보드에서 문자를 입력 받기 위해서 System.in과 InputStreamReader를 연결한 코드
InputStreamReader rd = new InputStreamReader(System.in);

문자 스트림으로 텍스트 파일 읽기

1. 파일 입력 스트림 생성(파일 열기)
FileReader fin = new FileReader("test.txt");

2. 파일 읽기

3. 스트림 닫기
fin.close(); // 해주는 것이 효율적이다
입력이 끝나야 연산이 가능함 
스트림이 끝나야 cpu가 작동한다.

오류가 많이 발생해서 예외 처리를 꼭 해줘야한다(파일을 찾지 못 할 경우)
파일 읽기, 쓰기, 닫기를 하는 동안 : IOException 발생 가능

문자 스트림으로 텍스트 파일 쓰기
 - 텍스트 파일에 쓰기 위해 문자 스트림 FileWriter클래스 이용

1. 파일 출력 스트림 생성(파일 열기)
 - 스트림을 생성하고 파일을 열어 스트림과 연결
File Writer fout = new FileWriter("test.txt");

2. 파일 쓰기
int fout(char[] cbuf, int off, int len)
len의 크기 만큼 읽어 cbut 배열의 정해진 위치부터 저장

바이트 스트림으로 바이너리 파일 쓰기
InputStream/OutputStream
추상 클래스이며, 바이트 입출력 처리를 위한 공통 기능을 가진 슈퍼클래스

FileInputStream/FileOutputStream
파일 입출력을 위한 클래스, 파일로부터 바이너리 데이터를 읽거나 저장

DataInputStream/DataOutputStream
이 스트림을 이용하면 Boolean, char, byte, short, int, long, float, double 타입의 값을
바이너리 형태로 저장할 수 있다. 

void.flush() : 출력 스트림에서 남아 있는 데이터 모두 출력
void.close() : 출력 스트림을 닫고 관련된 시스템 지원 해제


